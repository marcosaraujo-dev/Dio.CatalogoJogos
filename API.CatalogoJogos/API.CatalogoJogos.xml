<?xml version="1.0"?>
<doc>
    <assembly>
        <name>API.CatalogoJogos</name>
    </assembly>
    <members>
        <member name="M:API.CatalogoJogos.Controllers.V1.JogosController.Obter(System.Int32,System.Int32)">
            <summary>
            Buscar todos os jogos com controle de paginação
            </summary>
            <remarks>
            Não é possível retornar todos os jogos em uma unica requisição (sem paginação)
            </remarks>
            <param name="pagina">Indica qual página está sendo consultada. Mínimo 1 . Default 1</param>
            <param name="quantidade">Indica a quantidade de registros por página. Mínimo 1 e máximo 70. Default 5</param>
            <response code="200">Retorna a lista de jogos</response>
            <response code="204">Caso não haja jogos</response>   
        </member>
        <member name="M:API.CatalogoJogos.Controllers.V1.JogosController.Obter(System.Guid)">
            <summary>
            Buscar um jogo pelo seu Id
            </summary>
            <param name="idJogo">Id do jogo buscado</param>
            <response code="200">Retorna o jogo filtrado</response>
            <response code="204">Caso não haja jogo com este id</response>
        </member>
        <member name="M:API.CatalogoJogos.Controllers.V1.JogosController.InserirJogo(API.CatalogoJogos.InputModel.JogoInputModel)">
            <summary>
            Inserir um jogo no catálogo
            </summary>
            <param name="jogoInputModel">Dados do jogo que será inserido</param>
            <response code="200">Caso o jogo seja inserido com sucesso</response>
            <response code="422">Caso já exista um jogo com mesmo nome para a mesma produtora</response>   
        </member>
        <member name="M:API.CatalogoJogos.Controllers.V1.JogosController.AtualizarJogo(System.Guid,API.CatalogoJogos.InputModel.JogoInputModel)">
            <summary>
            Atualizar todos os dados de um jogo no catálogo
            </summary>
            /// <param name="idJogo">Id do jogo a ser atualizado</param>
            <param name="jogoInputModel">Novos dados para atualizar o jogo indicado</param>
            <response code="200">Caso o jogo seja atualizado com sucesso</response>
            <response code="404">Caso não exista um jogo com este Id</response>   
        </member>
        <member name="M:API.CatalogoJogos.Controllers.V1.JogosController.AtualizarJogo(System.Guid,System.Double)">
            <summary>
            Atualizar o preço de um jogo
            </summary>
            /// <param name="idJogo">Id do jogo a ser atualizado</param>
            <param name="preco">Novo preço do jogo</param>
            <response code="200">Caso o preço seja atualizado com sucesso</response>
            <response code="404">Caso não exista um jogo com este Id</response>   
        </member>
        <member name="M:API.CatalogoJogos.Controllers.V1.JogosController.ApagarJogo(System.Guid)">
            <summary>
            Excluir um jogo específico
            </summary>
            /// <param name="idJogo">Id do jogo a ser excluído</param>
            <response code="200">Caso a exclusão seja realizada com sucesso</response>
            <response code="404">Caso não exista um jogo com este Id</response>   
        </member>
        <member name="F:API.CatalogoJogos.Repositories.JogoRepository.jogos">
            <summary>
            Cria um dicionário de Jogos Iniciais
            </summary>
        </member>
        <member name="M:API.CatalogoJogos.Repositories.JogoRepository.Obter(System.Int32,System.Int32)">
            <summary>
            Obtém lista de Jogos encontrados
            </summary>
            <param name="pagina">Indica qual página está sendo consultada. </param>
            <param name="quantidade">Indica a quantidade de registros por página.</param>
            <returns>Uma lista de jogos localizados</returns>
        </member>
        <member name="M:API.CatalogoJogos.Repositories.JogoRepository.Obter(System.Guid)">
            <summary>
            Busca um determinado jogo procurando pelo seu Id
            </summary>
            <param name="id">Id do jogo buscado</param>
            <returns>Os dados do jogo localizado</returns>
        </member>
        <member name="M:API.CatalogoJogos.Repositories.JogoRepository.Obter(System.String,System.String)">
            <summary>
            Obtém o jogo buscando pelo seu nome e produtora usando Lambda
            </summary>
            <param name="nome">Nome do Jogo</param>
            <param name="produtora">nome da produtora do jogo</param>
            <returns></returns>
        </member>
        <member name="M:API.CatalogoJogos.Repositories.JogoRepository.ObterSemLambda(System.String,System.String)">
            <summary>
            Obtém o jogo buscando pelo seu nome e produtora sem a utilização de Lambda
            </summary>
            <param name="nome">Nome do Jogo</param>
            <param name="produtora">nome da produtora do jogo</param>
            <returns></returns>
        </member>
        <member name="M:API.CatalogoJogos.Repositories.JogoRepository.Inserir(API.CatalogoJogos.Entities.Jogo)">
            <summary>
            Inserir os dados de um jogo no catálogo
            </summary>
            <param name="jogo">Dados do jogo que será inserido</param>
            <returns>Os dados do jogo inserido</returns>
        </member>
        <member name="M:API.CatalogoJogos.Services.JogoService.Obter(System.Int32,System.Int32)">
            <summary>
            Busca os Jogos 
            </summary>
            <remarks>
            Não é possível retornar todos os jogos em uma unica requisição (sem paginação)
            </remarks>
            <param name="pagina">Indica qual página está sendo consultada.</param>
            <param name="quantidade">Indica a quantidade de registros por página. </param>
            <returns>Uma lista de jogos localizados</returns>
        </member>
        <member name="M:API.CatalogoJogos.Services.JogoService.Obter(System.Guid)">
            <summary>
            Busca um determinado jogo procurasndo pelo seu Id
            </summary>
            <param name="id">Id do jogo buscado</param>
            <returns>Os dados do jogo localizado</returns>
        </member>
        <member name="M:API.CatalogoJogos.Services.JogoService.Inserir(API.CatalogoJogos.InputModel.JogoInputModel)">
            <summary>
            Inserir os dados de um jogo no catálogo
            </summary>
            <param name="jogoInputModel">Dados do jogo que será inserido</param>
            <returns>Os dados do jogo inserido</returns>
        </member>
        <member name="M:API.CatalogoJogos.Services.JogoService.Atualizar(System.Guid,API.CatalogoJogos.InputModel.JogoInputModel)">
            <summary>
            Atualizar todos os dados de um jogo no catálogo
            </summary>
            /// <param name="idJogo">Id do jogo a ser atualizado</param>
            <param name="jogoInputModel">Novos dados para atualizar o jogo indicado</param>
        </member>
        <member name="M:API.CatalogoJogos.Services.JogoService.Atualizar(System.Guid,System.Double)">
            <summary>
            Atualizar o preço de um determinado jogo
            </summary>
            /// <param name="idJogo">Id do jogo a ser atualizado</param>
            <param name="preco">Novo preço do jogo</param>
        </member>
        <member name="M:API.CatalogoJogos.Services.JogoService.Remover(System.Guid)">
            <summary>
            Excluir um jogo específico
            </summary>
            /// <param name="id">Id do jogo a ser excluído</param>
        </member>
    </members>
</doc>
